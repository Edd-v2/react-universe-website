import React, { useState, useRef, useEffect } from "react";
import { Canvas, useFrame } from "@react-three/fiber";
import { OrbitControls } from "@react-three/drei";
import useTextures from "./useTextures";
import Planet from "./Planet";
import * as THREE from "three";

// CameraMovement Component
function CameraMovement({ cameraTarget, cameraPosition }) {
  useFrame(() => {
    if (!cameraTarget) return;

    // Lerp (linear interpolation) the camera position towards the target, increase the lerp speed
    cameraPosition.current = cameraPosition.current.map((v, i) =>
      THREE.MathUtils.lerp(v, cameraTarget[i], 10) // Increased speed here
    );
  });

  return null;
}

export default function Universe() {
  const [message, setMessage] = useState("Click a planet!");
  const { mercuryTexture, venusTexture, earthTexture, marsTexture, jupiterTexture, saturnTexture, saturnRingsTexture, uranusTexture, neptuneTexture, sunTexture } = useTextures();
  const [loading, setLoading] = useState(false);
  const [selectedPlanet, setSelectedPlanet] = useState(null);

  const [cameraTarget, setCameraTarget] = useState([40, 30, -170]); // Initial target (Earth's position)
  const orbitControlsRef = useRef();
  const cameraPosition = useRef([40, 30, -170]); // Starting camera position

  useEffect(() => {
    if (!orbitControlsRef.current) return;
    orbitControlsRef.current.enableZoom = false; // Disable zoom while moving the camera
  }, []);

  if (!mercuryTexture || !venusTexture || !earthTexture || !marsTexture || !jupiterTexture || !saturnTexture || !saturnRingsTexture || !uranusTexture || !neptuneTexture || !sunTexture) {
    return <div>Loading textures...</div>;
  }

  const planetData = [
    { name: "mercury", orbitRadius: 25, texture: mercuryTexture, scale: [1.5, 1.5, 1.5], speed: 2 },
    { name: "venus", orbitRadius: 35, texture: venusTexture, scale: [2.4, 2.4, 2.4], speed: 1.75 },
    { name: "earth", orbitRadius: 45, texture: earthTexture, scale: [3, 3, 3], speed: 1.5 },
    { name: "mars", orbitRadius: 55, texture: marsTexture, scale: [2.1, 2.1, 2.1], speed: 1.2 },
    { name: "jupiter", orbitRadius: 75, texture: jupiterTexture, scale: [6, 6, 6], speed: 0.8 },
    { name: "saturn", orbitRadius: 95, texture: saturnTexture, scale: [5.4, 5.4, 5.4], speed: 0.6 },
    { name: "uranus", orbitRadius: 115, texture: uranusTexture, scale: [4.2, 4.2, 4.2], speed: 0.4 },
    { name: "neptune", orbitRadius: 135, texture: neptuneTexture, scale: [3.9, 3.9, 3.9], speed: 0.3 },
  ];

  const handlePlanetClick = (planetName, position) => {
    setMessage(`You clicked on ${planetName}`);
    setLoading(true);
    setSelectedPlanet(planetName);
    setCameraTarget(position);
  };

  const handleBackToStart = () => {
    setSelectedPlanet(null);
    setMessage("Click a planet!");
    setLoading(false);
    setCameraTarget([30, 0, -45]);
  };

  const PlanetOrbit = ({ planet }) => (
    <>
      <Planet
        position={[0, 0, 0]}
        textureMap={planet.texture}
        scale={planet.scale}
        speed={planet.speed}
        orbitRadius={planet.orbitRadius}
        onClick={() => handlePlanetClick(planet.name, [planet.orbitRadius, 0, 0])}
      />
      <mesh rotation={[Math.PI / 2, 0, 0]}>
        <ringGeometry args={[planet.orbitRadius - 0.2, planet.orbitRadius + 0.2, 128]} />
        <meshBasicMaterial color="#333333" transparent opacity={0.3} side={THREE.DoubleSide} />
      </mesh>
    </>
  );

  const SaturnWithRings = ({ orbitRadius }) => (
    <group>
      <Planet
        position={[0, 0, 0]}
        textureMap={saturnTexture}
        scale={[5.4, 5.4, 5.4]}
        speed={0.6}
        orbitRadius={orbitRadius}
        onClick={() => handlePlanetClick("saturn", [orbitRadius, 0, 0])}
      />
      <mesh rotation={[Math.PI / 2, 0, 0]}>
        <ringGeometry args={[6.3, 9.6, 64]} />
        <meshStandardMaterial
          map={saturnRingsTexture}
          transparent
          opacity={1}
          alphaTest={0.1}
          side={THREE.DoubleSide}
        />
      </mesh>
      <mesh rotation={[Math.PI / 2, 0, 0]}>
        <ringGeometry args={[orbitRadius - 0.2, orbitRadius + 0.2, 128]} />
        <meshBasicMaterial color="#333333" transparent opacity={0.3} side={THREE.DoubleSide} />
      </mesh>
    </group>
  );